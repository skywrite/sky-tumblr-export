#!/usr/bin/env node

var program = require('commander')
  , colors = require('colors')
  , path = require('path')
  , pandoc = require('pdc')
  , request = require('request')
  , S = require('string')
  , fs = require('fs-extra')
  , cl = require('cl')
  , batch = require('batchflow')
  , MarkdownPage = require('markdown-page').MarkdownPage
  , util = require('util')

var DEFAULT_API_KEY = "fuiKNFp9vQFvjLNvx4sUwti4Yb5yGutBN4Xh10LXZhhRKjWlV4"
  , URL = "http://api.tumblr.com/v2/blog/{{url}}/{{resource}}?api_key={{api_key}}"

program
  .version(require('../package.json').version)
  .option('-u, --url [url]', 'REQUIRED. The url of the Tumblr blog.')
  .option('-d, --dir <dir>', 'The directory to dump the files. Default is the current directory.', process.cwd())
  .option('--api-key <apikey>', 'The API key. Optional.', DEFAULT_API_KEY)
  .parse(process.argv);

if (!program.url) return program.outputHelp();

URL = S(URL).template({url: program.url, api_key: program.apiKey}).s

function main () {
  console.log('Fetching articles...')
  
  function fetchBlogInfo () {
    var url = S(URL).template({resource: 'info'}).s
    request({url: url, json: true}, function(err, resp, body) {
      if (err || resp.statusCode !== 200) cl.exit(100, err)
      outputSkyConfig(body.response)
    })
  }

  function outputSkyConfig (blogInfo) {
    if (!blogInfo || !blogInfo.blog) cl.exit(101, "Could not get blog info.")
    blogInfo = blogInfo.blog

    var skyConfig = {
      blog: {}, 
      articles: {urlformat: '{{slug}}', 
      index: 'index.html'}, 
      build: {outputDir: 'public/'}, 
      partials: {}
    }
    
    skyConfig.blog.name = blogInfo.name || 'BLOG NAME'
    skyConfig.blog.url = blogInfo.url || program.url
    skyConfig.blog.tagline = blogInfo.description || 'DESCRIPTION'

    var configFile = path.join(program.dir, 'sky', 'config.json')
    fs.outputFileSync(configFile, JSON.stringify(skyConfig, null, 2))

    fetchArticles(blogInfo.posts)
  }

  function fetchArticles (postCount) {
    var offset = 0
      , limit = 20 //max as defined by API
      , steps = postCount / limit
      , urls = []

    //is there a rem?
    steps = postCount % limit === 0 ? steps : Math.floor(steps) + 1

    URL = URL + '&offset={{offset}}&limit={{limit}}'
    for (var i = 0; i < steps; ++i) {
      urls.push(S(URL).template({resource: 'posts', limit: limit, offset: offset.toString()}).s) //limit doesn't change
      offset += limit
    }

    batch(urls).seq()
    .each(function(i, url, next) {
      request({url: url, json: true}, function(err, resp, body) {
        if (err || resp.statusCode !== 200) console.error(err)
        iterateArticles(url, body.response, next)
      })
    })
    .error(function(err) {
      console.error(err)
      console.error(err.stack)
    })
    .end(done)
  }

  function done () {
    console.log('Done')
  }

  fetchBlogInfo()
}

main()


function iterateArticles (url, data, callback) {
  if (!data || !data.posts) cl.exit(102, "Got a bad response from %s", url)
  var articles = data.posts

  batch(articles).seq()
  .each(function(i, article, next) {
    outputArticle(article, next)
  })
  .error(function(err) {
    console.error(err)
    console.error(err.stack)
  })
  .end(function() {
    callback()
  })
}

function logArticle (title, date) {
  var text = colors.cyan(S('Got').padLeft(10)) + ' : ' + colors.green('[' + S(date.toDateString()).padRight(12) + '] ') + title
  console.log(text)
}

function outputArticle (article, next) {
  var mdp = MarkdownPage.create()
    , date = new Date(article.date)

  function gotoNext () { //output file too
    var ds = date.getFullYear() + '/' + ('0' + (date.getMonth() + 1)).slice(-2)
      , file = path.join(program.dir, 'articles', ds, article.slug + '.md')
      , data = mdp.genOutput()

    fs.outputFile(file, data, function(err) {
      if (err) console.error(err)

      logArticle(article.title, date)
      next()
    })
  }

  mdp.title = article.title
  mdp.metadata.id = article.id
  mdp.metadata.link = article.post_url
  mdp.metadata.slug = article.slug
  mdp.metadata.date = date

  if (article.state === 'published')
    mdp.metadata.publish = date
  
  mdp.metadata.tags = article.tags

  if (article.format !== 'html') {
    this.markdown = article.body
    gotoNext()
  } else {
    pandoc(article.body, 'html', 'markdown', function(err, result) {
      if (err) { 
        mdp.markdown = util.format('**[ERROR: sky-tumblr-export: %s]**',err)
        gotoNext()
      } else {
        mdp.markdown = result
        gotoNext()
      }
    })
  }
}




