#!/usr/bin/env node

var program = require('commander')
  , colors = require('colors')
  , path = require('path')
  , pandoc = require('pdc')
  , request = require('request')
  , S = require('string')
  , fs = require('fs-extra')
  , cl = require('cl')
  , batch = require('batchflow')
  , MarkdownPage = require('markdown-page').MarkdownPage
  , util = require('util')

var DEFAULT_API_KEY = "fuiKNFp9vQFvjLNvx4sUwti4Yb5yGutBN4Xh10LXZhhRKjWlV4"
  , URL = "http://api.tumblr.com/v2/blog/{{url}}/{{resource}}?api_key={{api_key}}"

program
  .version(require('../package.json').version)
  .option('-u, --url [url]', 'REQUIRED. The url of the Tumblr blog.')
  .option('-d, --dir <dir>', 'The directory to dump the files. Default is the current directory.', process.cwd())
  .option('-t, --titles', 'Output titles in markdown.')
  .option('--debug', 'Set to debug mode.')
  .option('--api-key <apikey>', 'The API key. Optional.', DEFAULT_API_KEY)
  .parse(process.argv);

if (!program.url) return program.outputHelp();

//strip leading http:// or https://
if (S(program.url).startsWith('http://'))
  program.url = program.url.replace('http://', '')
if (S(program.url).startsWith('https://'))
  program.url = program.url.replace('https://', '')


URL = S(URL).template({url: program.url, api_key: program.apiKey}).s

function main () {
  console.log('\n  Fetching articles...\n')
  
  function fetchBlogInfo () {
    var url = S(URL).template({resource: 'info'}).s

    request({url: url, json: true}, function(err, resp, body) {
      if (program.debug)
        console.log("DEUBG: %s".red.bold, url)
      if (err || resp.statusCode !== 200) cl.exit(100, err)
      outputSkyConfig(body.response)
    })
  }

  function outputSkyConfig (blogInfo) {
    if (!blogInfo || !blogInfo.blog) cl.exit(101, "Could not get blog info.")
    blogInfo = blogInfo.blog

    var skyConfig = {
      blog: {}, 
      articles: {urlformat: '{{slug}}', 
      index: 'index.html'}, 
      build: {outputDir: 'public/'}, 
      partials: {}
    }
    
    skyConfig.blog.name = blogInfo.name || 'BLOG NAME'
    skyConfig.blog.url = blogInfo.url || program.url
    skyConfig.blog.tagline = blogInfo.description || 'DESCRIPTION'

    var configFile = path.join(program.dir, 'sky', 'config.json')
    fs.outputFileSync(configFile, JSON.stringify(skyConfig, null, 2))

    fetchArticles(blogInfo.posts)
  }

  function fetchArticles (postCount) {
    var offset = 0
      , limit = 20 //max as defined by API
      , steps = postCount / limit
      , urls = []

    //is there a rem?
    steps = postCount % limit === 0 ? steps : Math.floor(steps) + 1

    URL = URL + '&offset={{offset}}&limit={{limit}}'
    for (var i = 0; i < steps; ++i) {
      urls.push(S(URL).template({resource: 'posts', limit: limit, offset: offset.toString()}).s) //limit doesn't change
      offset += limit
    }

    batch(urls).seq()
    .each(function(i, url, next) {
      if (program.debug) 
        console.log("DEUBG: %s".red.bold, url)
      request({url: url, json: true}, function(err, resp, body) {
        if (err || resp.statusCode !== 200) console.error(err)
        iteratePosts(url, body.response, next)
      })
    })
    .error(function(err) {
      console.error(err)
      console.error(err.stack)
    })
    .end(done)
  }

  function done () {
    console.log('Done')
  }

  fetchBlogInfo()
}

tryPandoc(main)


function iteratePosts (url, data, callback) {
  if (!data || !data.posts) cl.exit(102, "  Got a bad response from %s", url)
  var posts = data.posts

  batch(posts).seq()
  .each(function(i, post, next) {
    outputPost(post, next)
  })
  .error(function(err) {
    console.error(err)
    console.error(err.stack)
  })
  .end(function() {
    callback()
  })
}

function logPost (title, date) {
  var text = colors.cyan(S('Got').padLeft(10)) + ' : ' + colors.green('[' + S(date.toDateString()).padRight(12) + '] ') + title
  console.log(text)
}

function outputPost (post, next) {
  var mdp = MarkdownPage.create()
    , date = new Date(post.date)

  function gotoNext () { //output file too
    if (post.slug && post.slug.length > 0) {
      slug = post.slug
    } else {
      slug = post.id
    }
    var ds = date.getFullYear() + '/' + ('0' + (date.getMonth() + 1)).slice(-2)
      , file = path.join(program.dir, 'posts', ds, slug + '.md')
      , data = mdp.genOutput()

    fs.outputFile(file, data, function(err) {
      if (err) console.error(err)

      logPost(post.title, date)
      next()
    })
  }

  mdp.metadata.id = post.id
  mdp.metadata.link = post.post_url
  mdp.metadata.slug = post.slug
  mdp.metadata.date = date
  mdp.metadata.raw = JSON.stringify(post)

  if (post.state === 'published')
    mdp.metadata.publish = date
  
  mdp.metadata.tags = post.tags

  //if the type is something other than "text"
  switch (post.type) {
    case "link":
      post.body = '<a href="' + post.url + '">' + post.url + "</a>\n\n"
      post.body += post.description
      post.format = 'html'
      break;
    case "photo":
      post.title = S(post.caption).stripTags().s
      post.body = ''
      for (var i = post.photos.length - 1; i >= 0; i--) {
        photo = post.photos[i]
        post.body = post.body + '<img src="' + photo.original_size.url + '">\n'
      };
      post.format = 'html'
      break;
    case "video":
      post.title = S(post.caption).stripTags().s
      post.body =  post.player[post.player.length - 1].embed_code
      post.format = 'html'
      break;
    case "quote":
      if (post.caption && post.caption.length) {
        post.title = S(post.caption).stripTags().s
      } else {
        post.title = post.text
      }
      post.body =  '<blockquote>' + post.text + '</blockquote>\n' + post.source
      post.format = 'html'
      break;
  }

  if (program.titles)
    mdp.title = post.title
  
  mdp.metadata.title = post.title

  if (post.format === 'markdown') {
    mdp.markdown = post.body
    gotoNext()
  } else {
    pandoc(post.body, 'html', 'markdown', function(err, result) {
      if (err) { 
        mdp.markdown = util.format('**[ERROR: sky-tumblr-export: %s]**',err)
        gotoNext()
      } else {
        mdp.markdown = result
        gotoNext()
      }
    })
  }
}

function tryPandoc (callback) {
  var exec = require('child_process').exec
  exec('pandoc --version', function(err, stderr, stdout) {
    if (err) cl.exit(1, "\n  You must install pandoc.\n")
    callback()
  })
}
